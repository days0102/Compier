 Key	->  using
 Id	->  sys
 Key	->  class
 Id	->  main
 Sym	->  {
 Num	->  5
 Sym	->  -
 Num	->  3
 Sym	->  -
 Num	->  1
 Sym	->  +
 Num	->  1
 Sym	->  +
 Num	->  3
 Num	->  3
 Sym	->  -
 Num	->  6
 Sym	->  +
 Num	->  6
 Key	->  use
 Id	->  a
 Sym	->  =
 Num	->  1
 Key	->  use
 Id	->  b
 Sym	->  =
 Id	->  a
 Sym	->  +
 Num	->  4
 Id	->  out
 Id	->  b
 Key	->  use
 Id	->  c
 Sym	->  =
 Id	->  b
 Sym	->  +
 Id	->  b
 Id	->  out
 Id	->  c
 Sym	->  }
 Key	->  class
 Id	->  abc
 Sym	->  {
 Key	->  use
 Id	->  c
 Sym	->  =
 Num	->  3
 Sym	->  +
 Num	->  5
 Key	->  use
 Id	->  name
 Sym	->  =
 Id	->  c
 Sym	->  +
 Id	->  c
 Id	->  c
 Sym	->  =
 Id	->  name
 Sym	->  +
 Id	->  c
 Sym	->  }
 Key	->  class
 Id	->  abcd
 Sym	->  {
 Key	->  use
 Id	->  c
 Sym	->  =
 Num	->  3
 Sym	->  +
 Num	->  5
 Sym	->  }
------------
line: 19
word: 0
-------------------
ast_root: 0xb640d0	line: 19


                          program
  ┌──────────────────────────┴──────────────────────────┐
using                                                 class
  │                            ┌────────────────────────┴──┬─────────────────────┐
 sys                         main                         abc                  abcd
                         ┌─────┴────┐                ┌─────┴────┐          ┌─────┴────┐
                    expression  function        expression  function  expression  function
        ┌─────┬───┬─────┬─────┬────┬─────┐    ┌──────┴┬─────┐              │
        +     +  use   use  call  use  call  use     use    =             use
      ┌─┴┐  ┌─┴┐  │     │     │    │     │    │       │  ┌──┴──┐           │
      +  3  -  6  =     =    ...   =    ...   =       =  c     +           =
    ┌─┴┐  ┌─┴┐  ┌─┴┐  ┌─┴┐       ┌─┴┐       ┌─┴┐    ┌─┴─┐    ┌─┴─┐       ┌─┴┐
    -  1  3  6  a  1  b  +       c  +       c  +  name  +  name  c       c  +
  ┌─┴┐                 ┌─┴┐       ┌─┴┐       ┌─┴┐     ┌─┴┐                ┌─┴┐
  -  1                 a  4       b  b       3  5     c  c                3  5
┌─┴┐
5  3
; ModuleID = 'module'
source_filename = "module"

@0 = private unnamed_addr constant [3 x i8] c"%f\00", align 1

define void @program() {
global:
  ret void
}

declare i32 @printf(i8*, ...)

define i32 @out(double %0) {
print:
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @0, i32 0, i32 0), double %0)
  ret i32 %1
}

define void @main() {
class:
  %0 = fsub double 5.000000e+00, 3.000000e+00
  %1 = fsub double %0, 1.000000e+00
  %2 = fadd double %1, 1.000000e+00
  %3 = fadd double %2, 3.000000e+00
  %4 = fsub double 3.000000e+00, 6.000000e+00
  %5 = fadd double %4, 6.000000e+00
  %a = alloca double
  store double 1.000000e+00, double* %a
  %b = alloca double
  %6 = load double, double* %a
  %7 = fadd double %6, 4.000000e+00
  store double %7, double* %b
  %8 = load double, double* %b
  %9 = call i32 @out(double %8)
  %c = alloca double
  %10 = load double, double* %b
  %11 = load double, double* %b
  %12 = fadd double %10, %11
  store double %12, double* %c
  %13 = load double, double* %c
  %14 = call i32 @out(double %13)
  ret void
}

define void @abc() {
class:
  %c = alloca double
  %0 = fadd double 3.000000e+00, 5.000000e+00
  store double %0, double* %c
  %name = alloca double
  %1 = load double, double* %c
  %2 = load double, double* %c
  %3 = fadd double %1, %2
  store double %3, double* %name
  %4 = load double, double* %name
  %5 = load double, double* %c
  %6 = fadd double %4, %5
  store double %6, double* %c
  ret void
}

define void @abcd() {
class:
  %c = alloca double
  %0 = fadd double 3.000000e+00, 5.000000e+00
  store double %0, double* %c
  ret void
}
x86_64-pc-linux-gnu

